<?php

/**
 * @file
 * Contains lit_xml.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\lit_xml\Utils\XmlExporterFactory;
use Drupal\lit_xml\Utils\FtpClient;

/**
 * Implements hook_cron().
 */
function lit_xml_cron() {
  $local_files = [];
  $run_export_at = _lit_xml_time_to_export();
  $destination_types = ['danbib', 'brond', 'static'];
  $config = \Drupal::configFactory()->getEditable('lit_xml.settings');
  $basePath = \Drupal::service('file_system')->realpath(file_default_scheme() . "://");

  // Check if config have been set
  if ($run_export_at && $config->get('types') && $run_export_at > time()) {
    // Save the time for begning of this export
    $export_start_time = time();

    // Get library ID
    $lib_id = (string) $config->get('library_id') ?: '150005';

    // Get content-types to export
    $content_types = array_filter($config->get('types'));

    // Create new ftp client
    $ftp_server = $config->get('ftp_server') ?: 'ftp.dbc.dk';
    $ftp_user = $config->get('ftp_user') ?: 'ftp';
    $ftp_password = $config->get('ftp_password') ?: 'ftp';

    $ftp = new FtpClient($ftp_server, $ftp_user, $ftp_password);

    // Create an export for each export destination
    foreach ($destination_types as $destination) {
      if (!_lit_xml_have_been_executed_today($run_export_at, $destination)) {
        switch ($destination) {
          case 'danbib':
            $ftp_formats = array_filter($config->get('to_danbib_ftp') ?: ['abm']);
            if (count($ftp_formats)) {
              $serial = _lit_xml_serial();

              // Create export files
              foreach ($ftp_formats as $format) {
                _lit_xml_create_xml($format, $content_types, $lib_id, $local_files, $destination);
              }

              // Upload files and trans file
              _lit_xml_ftp_upload_files($ftp, $local_files, $serial, $destination);
              $ftp->upload_transfile_danbib($local_files, sprintf('%03d', $serial), $lib_id);

              // Save serial
              $config->set('ftp_serial', (string) $serial);

              _lit_xml_update_db_export_time($export_start_time, $destination);

              // Clean up
              _lit_xml_clean($local_files);
              $local_files = [];
            }
            break;

          case 'brond':
            $ftp_formats = array_filter($config->get('to_brond_ftp') ?: ['abm']);
            if (count($ftp_formats)) {
              $serial = _lit_xml_serial();

              // Create export files
              foreach ($ftp_formats as $format) {
                _lit_xml_create_xml($format, $content_types, $lib_id, $local_files, $destination);
              }

              // Upload files and trans file
              _lit_xml_ftp_upload_files($ftp, $local_files, $serial, $destination);
              $ftp->upload_transfile_brond($local_files, sprintf('%03d', $serial), $lib_id);

              // Save serial
              $config->set('ftp_serial', (string)$serial);

              // Update database, content have been export
              _lit_xml_update_db_export_time($export_start_time, $destination);

              // Clean up
              _lit_xml_clean($local_files);
              $local_files = [];
            }
            break;

          case 'static':
            $ftp_formats = array_filter($config->get('static_files') ?:['ws']);
            if (count($ftp_formats)) {
              // Create export files
              foreach ($ftp_formats as $format) {
                _lit_xml_create_xml($format, $content_types, $lib_id, $local_files, $destination);
              }

              // Move file(s) to static location
              $static_location = $basePath . '/'. $config->get('static_location') ?: 'export/';
              if (file_prepare_directory($static_location, FILE_CREATE_DIRECTORY)) {
                _lit_xml_move_static_file($local_files, $static_location);
              }

              // Update database, content have been export
              _lit_xml_update_db_export_time($export_start_time, 'static');

              // Clean up
              _lit_xml_clean($local_files);
              $local_files = [];
            }
            break;

          default:
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lit_xml_node_insert(EntityInterface $entity) {
  _lit_xml_log('create', $entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function lit_xml_node_update(EntityInterface $entity) {
  _lit_xml_log('update', $entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function lit_xml_node_delete(EntityInterface $entity) {
  _lit_xml_log('delete', $entity);
}

/**
 * @param string $event
 * @param $entity
 */
function _lit_xml_log(string $event, EntityInterface $entity) {
  \Drupal::database()->insert('lit_xml_logs')
    ->fields([
      'nid' => $entity->id(),
      'type' => $entity->bundle(),
      'title' => $entity->label(),
      'event' => $event,
      'created_at' => time()
    ])
    ->execute();
}

/**
 * Remove temp. files for the server.
 */
function _lit_xml_clean($local_files) {
  $clean = \Drupal::config('lit_xml.settings')->get('clean_up') ?: ['clean' => '1'];
  if ($clean[1]) {
    foreach ( $local_files as $local_file ) {
      unlink($local_file);
    }
  }
}

/**
 * Update database export information.
 *
 * @param unix timestamp for start of export.
 * @param the destination for the export.
 */
function _lit_xml_update_db_export_time($time, $dest) {
  $result = \Drupal::database()->insert('lit_xml_exports')
    ->fields([
      'destination' => $dest,
      'created_at' => $time,
    ])
    ->execute();

  return (bool) $result;
}

/**
 * Upload file(s).
 *
 * @param ref. to ftp client.
 * @param array of local file names.
 * @param destintion for this export.
 */
function _lit_xml_ftp_upload_files($ftp, $local_files, $serial, $dest) {
  foreach ($local_files as $local_file) {
    $remote_file = str_replace(['[dest]', '[seiral]'],
      [$dest, sprintf('%03d', $serial)], basename($local_file));
    $ftp->put($local_file,  $remote_file);
  }
}

/**
 * Crete XML file for a given content_type.
 *
 * @param the formats to create an xml export for (DK-ABM, Doc Book...).
 * @param this exports start time.
 * @param content types to export.
 * @param the libaray id.
 * @param placeholder for local files.
 */
function _lit_xml_create_xml($format, $content_types, $lib_id, &$local, $destination) {
  $path = file_directory_temp() .'/';
  $filename = $path . sprintf("%s.litteratursiden_%s_%s_%s.xml", $lib_id, '[dest]', $format, '[seiral]');

  // Create exporter
  $xml_exporter = (new XMLExporterFactory)->createXmlExporter($format, $destination, $filename);

  // Build XML based on exports selected in the backend
  $xml_exporter->setXmlData($content_types);

  if ($xml_exporter->hasData()){
    $xml_exporter->save();

    // Update book-keeping, which is parsed by ref.
    $local[$xml_exporter->getFormat()] = $xml_exporter->getFilename(); // It may be append .bz2 in the exporter
  }
}

/**
 * Get the next serial number.
 *
 * @return integer serial as int
 */
function _lit_xml_serial() {
  $serial = \Drupal::config('lit_xml.settings')->get('ftp_serial') ?: 0;
  if (++$serial > 999) {
    \Drupal::configFactory()->getEditable('lit_xml.settings')
      ->set('ftp_serial', 0)
      ->save();
    $serial = 1;
  }
  return $serial;
}

/**
 * Check the database to see if xmlExport have been executed today.
 */
function _lit_xml_have_been_executed_today($export_at_time, $destination) {
  $query = \Drupal::database()->select('lit_xml_exports', 't');
  $query->addExpression('COUNT(*)', 'count');
  $query->condition('destination', $destination);
  $query->condition('created_at', [$export_at_time, mktime(0, 0, 0)], 'BETWEEN');

  $result = $query->execute()->fetchField();

  return (bool) $result;
}

/**
 * Create unix timestamp based on time given in backend configuration by admin.
 */
function _lit_xml_time_to_export() {
  $cron_time = \Drupal::config('lit_xml.settings')->get('time');
  if ($cron_time == null) {
    return FALSE;
  }

  // Get timezone offset for denmark.
  $tz           = new DateTimeZone('Europe/Copenhagen');
  $formDateTime = DateTime::createFromFormat('Y-m-d H:i:s', $cron_time, $tz);
  $timeString   = $formDateTime->format('H:i:s');

  // We need only time and date will have today's value.
  $formTime = DateTime::createFromFormat('H:i:s', $timeString, $tz);

  return $formTime->getTimestamp();
}

/**
 * Moves XML files to static location, so clients can fetch them.
 * If the detination file exists, it will be overwritten.
 *
 * @param array of local files (source files).
 * @param location path of destination.
 */
function _lit_xml_move_static_file($local_files, $static_location) {
  // Format that should be move
  $static_files = array_filter(\Drupal::config('lit_xml.settings')->get('static_files') ?:['abm']);
  if (count($static_files) > 0) {
    foreach ( $local_files as $type => $local_file ) {
      if (in_array($type, $static_files)) {
        $dest = $static_location .'/litteratursiden_'. $type . '.xml';
        copy($local_file, $dest);
      }
    }
  }
}
