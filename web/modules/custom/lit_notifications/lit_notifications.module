<?php

/**
 * @file
 * Provides notifications functionality.
 */

use Drupal\comment\CommentInterface;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\lit_notifications\Controller\UnsubscribeController;
use Drupal\node\NodeInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_comment_insert().
 */
function lit_notifications_comment_insert(CommentInterface $comment) {
  if ($comment->isPublished()) {
    lit_notifications_send_comment_insert_notification($comment);
  }
}

/**
 * Implements hook_comment_update().
 */
function lit_notifications_comment_update(CommentInterface $comment) {
  /** @var \Drupal\comment\CommentInterface $comment_original */
  $comment_original = $comment->original;
  if (!$comment_original->isPublished() && $comment->isPublished()) {
    lit_notifications_send_comment_insert_notification($comment);
  }
  elseif ($comment->getOwnerId() != Drupal::currentUser()->id()) {
    $entity = $comment->get('entity_id')->entity;
    $token_data = ['comment' => $comment, 'node' => $entity];
    lit_notifications_comment_notify('comment_update', $comment->getOwner(), $token_data);
  }
}

/**
 * Implements hook_comment_delete().
 */
function lit_notifications_comment_delete(CommentInterface $comment) {
  if ($comment->getOwnerId() != Drupal::currentUser()->id()) {
    $entity = $comment->get('entity_id')->entity;
    $token_data = ['comment' => $comment, 'node' => $entity];
    lit_notifications_comment_notify('comment_delete', $comment->getOwner(), $token_data);
  }
}

/**
 * Implements hook_form_user_admin_settings_alter().
 */
function lit_notifications_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $mail_config = \Drupal::config('lit_notifications.mail');

  $form['email_comment_insert'] = [
    '#type' => 'details',
    '#title' => t('Comment created'),
    '#description' => t('Enable and edit email messages sent to users when comments are added.'),
    '#group' => 'email',
  ];

  $form['email_comment_insert']['comment_insert_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('comment_insert.subject'),
    '#maxlength' => 180,
  ];

  $form['email_comment_insert']['comment_insert_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('comment_insert.body'),
    '#rows' => 15,
  ];

  $form['email_comment_update'] = [
    '#type' => 'details',
    '#title' => t('Comment updated'),
    '#description' => t('Enable and edit email messages sent to users when his/her comment is updated.'),
    '#group' => 'email',
  ];

  $form['email_comment_update']['comment_update_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('comment_update.subject'),
    '#maxlength' => 180,
  ];

  $form['email_comment_update']['comment_update_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('comment_update.body'),
    '#rows' => 15,
  ];

  $form['email_comment_delete'] = [
    '#type' => 'details',
    '#title' => t('Comment deleted'),
    '#description' => t('Enable and edit email messages sent to users when his/her comment is deleted.'),
    '#group' => 'email',
  ];

  $form['email_comment_delete']['comment_delete_subject'] = [
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $mail_config->get('comment_delete.subject'),
    '#maxlength' => 180,
  ];

  $form['email_comment_delete']['comment_delete_body'] = [
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $mail_config->get('comment_delete.body'),
    '#rows' => 15,
  ];

  $form['#submit'][] = 'lit_notifications_user_admin_settings_submit';
}

/**
 * Submit handler for form 'user_admin_settings'.
 */
function lit_notifications_user_admin_settings_submit($form, FormStateInterface $form_state): void {
  \Drupal::configFactory()->getEditable('lit_notifications.mail')
    ->set('comment_insert.subject', $form_state->getValue('comment_insert_subject'))
    ->set('comment_insert.body', $form_state->getValue('comment_insert_body'))
    ->set('comment_update.subject', $form_state->getValue('comment_update_subject'))
    ->set('comment_update.body', $form_state->getValue('comment_update_body'))
    ->set('comment_delete.subject', $form_state->getValue('comment_delete_subject'))
    ->set('comment_delete.body', $form_state->getValue('comment_delete_body'))
    ->save();
}

/**
 * Implements hook_mail().
 */
function lit_notifications_mail($key, &$message, $params) {
  $token_service = \Drupal::token();
  $language_manager = \Drupal::languageManager();
  $langcode = $message['langcode'];
  $variables = ['user' => $params['account']] + $params['token_data'];

  $language = $language_manager->getLanguage($params['account']->getPreferredLangcode());
  $original_language = $language_manager->getConfigOverrideLanguage();
  $language_manager->setConfigOverrideLanguage($language);
  $mail_config = \Drupal::config('lit_notifications.mail');

  $token_options = [
    'langcode' => $langcode,
    'callback' => 'user_mail_tokens',
    'clear' => TRUE,
  ];
  $message['subject'] .= PlainTextOutput::renderFromHtml($token_service->replace($mail_config->get($key . '.subject'), $variables, $token_options));
  $message['body'][] = $token_service->replace($mail_config->get($key . '.body'), $variables, $token_options);

  $language_manager->setConfigOverrideLanguage($original_language);
}

/**
 * Implements hook_mail_alter().
 */
function lit_notifications_mail_alter(&$message): void {
  if (!in_array($message['module'], ['lit_notifications', 'user'])) {
    return;
  }

  foreach ($message['body'] as &$body) {
    // Making all text markup to make sure that HTML tags won't be escaped
    // according to function
    // Drupal\swiftmailer\Plugin\Mail\SwiftMailer::massageMessageBody().
    $body = Markup::create($body);
  }
}

/**
 * Sends an email notification to user.
 *
 * @param string $key
 *   Email key.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   Account to whom email should be sent.
 * @param array $token_data
 *   Data for token replacements. For instance node or comment.
 *   Each key is the entity type name and value is an entity.
 */
function lit_notifications_comment_notify($key, AccountInterface $account, $token_data = []): void {
  /** @var \Drupal\Core\Mail\MailManager $mail */
  $mail = \Drupal::service('plugin.manager.mail');

  $params = ['account' => $account, 'token_data' => $token_data];
  $mail->mail('lit_notifications', $key, $account->getEmail(), $account->getPreferredLangcode(), $params);
}

/**
 * Sends email notification about creating a new comment.
 *
 * @param \Drupal\comment\CommentInterface $comment
 *   Comment entity which was created.
 */
function lit_notifications_send_comment_insert_notification(CommentInterface $comment): void {
  $entity = $comment->get('entity_id')->entity;

  if ($entity) {
    /** @var \Drupal\flag\FlagServiceInterface $flag_service */
    $flag_service = \Drupal::service('flag');
    $flag = $flag_service->getFlagById('notifications');

    $users = $flag_service->getFlaggingUsers($entity, $flag);
    unset($users[$comment->getOwnerId()], $users[Drupal::currentUser()->id()]);

    $token_data = ['comment' => $comment, 'node' => $entity];

    if ($comment->hasParentComment()) {
      $comment_parent = $comment->getParentComment();
      unset($users[$comment_parent->getOwnerId()]);

      lit_notifications_comment_notify('comment_reply',
        $comment_parent->getOwner(), $token_data);
    }

    foreach ($users as $user) {
      lit_notifications_comment_notify('comment_insert', $user, $token_data);
    }
  }
}

/**
 * Implements hook_tokens().
 */
function lit_notifications_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array {
  $tokens = [];

  if (isset($data['user'], $data['node']) && $data['user'] instanceof UserInterface && $data['node'] instanceof NodeInterface) {
    $hash = UnsubscribeController::getHash($data['user'], $data['node']);

    $route_params = [
      'user' => $data['user']->id(),
      'node' => $data['node']->id(),
      'hash' => $hash,
    ];
    $unsubscribe_url = Url::fromRoute('lit_notifications.unsubscribe', $route_params);
    $tokens['[lit_notifications:unsubscribe]'] = $unsubscribe_url->setAbsolute()->toString();
  }

  return $tokens;
}
