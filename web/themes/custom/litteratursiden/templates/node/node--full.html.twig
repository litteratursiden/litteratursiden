{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
node.bundle|clean_class,
node.isPromoted() ? 'is-promoted',
node.isSticky() ? 'is-sticky',
not node.isPublished() ? 'is-unpublished',
view_mode ? view_mode|clean_class,
'clearfix',
] %}
<article{{ attributes.addClass(classes) }}>
  <div class="container">
    <div class="left-col">
      <div class="author-block">
        {{ content.owner_portrait }}
        {{ content.posted }}
      </div>
    </div>
    <div class="right-col">
      {{ title_prefix }}
      <h4 class="node-type"> {{ node.type.entity.label }}</h4>
      <h2{{ title_attributes.addClass('title') }}>
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
      {{ title_suffix }}
      <div class="desktop-node-content hidden-xs hidden-sm">
        <div class="social-block">
          <div class="grow">
            {{ content.flag_bookmark }}
            {{ content.flag_like }}
          </div>
        </div>

        <div{{ content_attributes.addClass('content') }}>
          {{ content|without('links', 'owner_portrait', 'flag_bookmark', 'flag_like', 'social_media', 'group_additional_info', 'posted', 'field_block_reference') }}
        </div>
      </div>
    </div>
    {#Placeholder for DOM modifications#}
    <div class="mobile-node-content hidden-md hidden-lg">
      <div class="social-block">
        <div class="grow">
          {{ content.flag_bookmark }}
          {{ content.flag_like }}
        </div>
      </div>
      <div{{ content_attributes.addClass('content') }}>
        {{ content|without('links', 'owner_portrait', 'flag_bookmark', 'flag_like', 'social_media', 'group_additional_info', 'posted', 'field_block_reference') }}
      </div>
    </div>
  </div>
  <div class="accordion">
    <div class="container">
      <div class="right-col">
        {% if content.group_additional_info %}
          {{ content.group_additional_info }}
        {% endif %}
      </div>
    </div>
  </div>
  {# Get field references for author name #}
  {% if node.bundle == 'analysis' %}
    {% if node.field_analysis_reference_book.entity.field_book_reference_author.value is not empty %}
      {% set field = node.field_analysis_reference_book.entity.field_book_reference_author.entity.title.value %}
    {% endif %}
  {% elseif node.bundle == 'interview' %}
    {% set field = node.field_interview_reference_author.entity.title.value %}
  {% elseif node.bundle == 'review' %}
    {% if node.field_review_reference_book.entity.field_book_reference_author.value is not empty %}
      {% set field = node.field_review_reference_book.entity.field_book_reference_author.entity.title.value %}
    {% endif %}
  {% elseif node.bundle == 'youthreview' %}
    {% if node.field_youthreview_reference_book.entity.field_book_reference_author.value is not empty %}
      {% set field = node.field_youthreview_reference_book.entity.field_book_reference_author.entity.title.value %}
    {% endif %}
  {% endif %}
  {% if field is defined %}
    <div class="block-views-blockrelated-books-related-books-by-author-block">
      <div class="content-wrapper">
        <h2 class="block-title">{{ 'Books by @author_name'|t({'@author_name': field}) }}</h2>
        {{ drupal_view('related_books', 'related_books_by_author_block') }}
      </div>
    </div>
  {% endif %}
  {{ content.field_block_reference }}
</article>
