diff --git a/src/Entity/GroupType.php b/src/Entity/GroupType.php
index c8ebd75..a336a97 100644
--- a/src/Entity/GroupType.php
+++ b/src/Entity/GroupType.php
@@ -242,6 +242,18 @@ class GroupType extends ConfigEntityBundleBase implements GroupTypeInterface {
   public function postSave(EntityStorageInterface $storage, $update = TRUE) {
     parent::postSave($storage, $update);
 
+    // The code below will create the default group roles and the group
+    // content types for enforced plugins. It is extremely important that we
+    // only run this code if we are dealing with a new group type that was
+    // created through the API or UI; not through config synchronization.
+    //
+    // We do not create group roles or group content types for a synced group
+    // type because those should have been exported along with the group type.
+    if (\Drupal::isConfigSyncing()) {
+      return;
+    }
+
+
     if (!$update) {
       // Store the id in a short variable for readability.
       $group_type_id = $this->id();
@@ -249,45 +261,36 @@ class GroupType extends ConfigEntityBundleBase implements GroupTypeInterface {
       // @todo Remove this line when https://www.drupal.org/node/2645202 lands.
       $this->setOriginalId($group_type_id);
 
-      // The code below will create the default group roles and the group
-      // content types for enforced plugins. It is extremely important that we
-      // only run this code if we are dealing with a new group type that was
-      // created through the API or UI; not through config synchronization.
-      //
-      // We do not create group roles or group content types for a synced group
-      // type because those should have been exported along with the group type.
-      if (!$this->isSyncing()) {
-        // Create the three special roles for the group type.
-        GroupRole::create([
-          'id' => $this->getAnonymousRoleId(),
-          'label' => t('Anonymous'),
-          'weight' => -102,
-          'internal' => TRUE,
-          'audience' => 'anonymous',
-          'group_type' => $group_type_id,
-        ])->save();
-        GroupRole::create([
-          'id' => $this->getOutsiderRoleId(),
-          'label' => t('Outsider'),
-          'weight' => -101,
-          'internal' => TRUE,
-          'audience' => 'outsider',
-          'group_type' => $group_type_id,
-        ])->save();
-        GroupRole::create([
-          'id' => $this->getMemberRoleId(),
-          'label' => t('Member'),
-          'weight' => -100,
-          'internal' => TRUE,
-          'group_type' => $group_type_id,
-        ])->save();
-
-        // Enable enforced content plugins for new group types.
-        $this->getContentEnablerManager()->installEnforced($this);
-
-        // Synchronize outsider roles for new group types.
-        $this->getGroupRoleSynchronizer()->createGroupRoles([$group_type_id]);
-      }
+      // Create the three special roles for the group type.
+      GroupRole::create([
+        'id' => $this->getAnonymousRoleId(),
+        'label' => t('Anonymous'),
+        'weight' => -102,
+        'internal' => TRUE,
+        'audience' => 'anonymous',
+        'group_type' => $group_type_id,
+      ])->save();
+      GroupRole::create([
+        'id' => $this->getOutsiderRoleId(),
+        'label' => t('Outsider'),
+        'weight' => -101,
+        'internal' => TRUE,
+        'audience' => 'outsider',
+        'group_type' => $group_type_id,
+      ])->save();
+      GroupRole::create([
+        'id' => $this->getMemberRoleId(),
+        'label' => t('Member'),
+        'weight' => -100,
+        'internal' => TRUE,
+        'group_type' => $group_type_id,
+      ])->save();
+
+      // Enable enforced content plugins for new group types.
+      $this->getContentEnablerManager()->installEnforced($this);
+
+      // Synchronize outsider roles for new group types.
+      $this->getGroupRoleSynchronizer()->createGroupRoles([$group_type_id]);
     }
   }
 
diff --git a/src/GroupRoleSynchronizer.php b/src/GroupRoleSynchronizer.php
index 6827178..d60f163 100644
--- a/src/GroupRoleSynchronizer.php
+++ b/src/GroupRoleSynchronizer.php
@@ -82,6 +82,11 @@ class GroupRoleSynchronizer implements GroupRoleSynchronizerInterface {
    * {@inheritdoc}
    */
   public function createGroupRoles($group_type_ids = NULL, $role_ids = NULL) {
+    // Don't do anything during config sync.
+    if (\Drupal::isConfigSyncing()) {
+      return;
+    }
+
     // Load all possible group type IDs if none were provided.
     if (empty($group_type_ids)) {
       $group_type_ids = $this->entityTypeManager->getStorage('group_type')->getQuery()->execute();
diff --git a/src/Plugin/GroupContentEnabler/GroupMembership.php b/src/Plugin/GroupContentEnabler/GroupMembership.php
index d8a5673..cd02390 100644
--- a/src/Plugin/GroupContentEnabler/GroupMembership.php
+++ b/src/Plugin/GroupContentEnabler/GroupMembership.php
@@ -148,6 +148,17 @@ class GroupMembership extends GroupContentEnablerBase {
    * {@inheritdoc}
    */
   public function postInstall() {
+    // The code below will create the group membership field.
+    // It is extremely important that we only run this code if we are dealing
+    // with a new group type that was created through the API or UI; not through
+    // config synchronization.
+    //
+    // We do not create the group membership for a synced group type because it
+    // should have been exported along with the group type.
+    if (\Drupal::isConfigSyncing()) {
+      return;
+    }
+
     $group_content_type_id = $this->getContentTypeConfigId();
 
     // Add the group_roles field to the newly added group content type. The
